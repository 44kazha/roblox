-- Exunys Aimbot GUI by Claude
-- Based on Universal Aimbot Module by Exunys

-- Services
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")

-- Variables
local Player = Players.LocalPlayer
local Mouse = Player:GetMouse()
local Camera = workspace.CurrentCamera

-- Aimbot Module Loading
local Aimbot = getgenv().ExunysDeveloperAimbot or loadstring(game:HttpGet("https://raw.githubusercontent.com/Exunys/Aimbot-V3/main/Source.lua"))()
Aimbot.Load()

-- UI Library
local Library = {}

function Library:Create(class, properties)
    local instance = Instance.new(class)
    
    for property, value in pairs(properties or {}) do
        instance[property] = value
    end
    
    return instance
end

function Library:CreateGui()
    -- Remove existing GUI if it exists
    pcall(function()
        CoreGui:FindFirstChild("AimbotGUI"):Destroy()
    end)
    
    -- Main Frame
    local MainGui = self:Create("ScreenGui", {
        Name = "AimbotGUI",
        Parent = CoreGui,
        ZIndexBehavior = Enum.ZIndexBehavior.Sibling,
        ResetOnSpawn = false
    })
    
    local MainFrame = self:Create("Frame", {
        Name = "MainFrame",
        Parent = MainGui,
        BackgroundColor3 = Color3.fromRGB(35, 35, 45),
        BorderSizePixel = 0,
        Position = UDim2.new(0.8, -150, 0.5, -175),
        Size = UDim2.new(0, 300, 0, 350),
        Active = true,
        Draggable = true
    })
    
    self:Create("UICorner", {
        Parent = MainFrame,
        CornerRadius = UDim.new(0, 8)
    })
    
    local Title = self:Create("TextLabel", {
        Name = "Title",
        Parent = MainFrame,
        BackgroundColor3 = Color3.fromRGB(45, 45, 55),
        Size = UDim2.new(1, 0, 0, 40),
        Font = Enum.Font.GothamBold,
        Text = "Exunys Aimbot",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 18
    })
    
    self:Create("UICorner", {
        Parent = Title,
        CornerRadius = UDim.new(0, 8)
    })
    
    local MainTabHolder = self:Create("Frame", {
        Name = "MainTabHolder",
        Parent = MainFrame,
        BackgroundColor3 = Color3.fromRGB(35, 35, 45),
        Position = UDim2.new(0, 10, 0, 50),
        Size = UDim2.new(1, -20, 1, -60)
    })
    
    local TabsFrame = self:Create("Frame", {
        Name = "Tabs",
        Parent = MainTabHolder,
        BackgroundColor3 = Color3.fromRGB(30, 30, 40),
        Size = UDim2.new(1, 0, 0, 30)
    })
    
    self:Create("UICorner", {
        Parent = TabsFrame,
        CornerRadius = UDim.new(0, 6)
    })
    
    local ContentHolder = self:Create("Frame", {
        Name = "ContentHolder",
        Parent = MainTabHolder,
        BackgroundColor3 = Color3.fromRGB(30, 30, 40),
        Position = UDim2.new(0, 0, 0, 35),
        Size = UDim2.new(1, 0, 1, -35)
    })
    
    self:Create("UICorner", {
        Parent = ContentHolder,
        CornerRadius = UDim.new(0, 6)
    })
    
    -- Create Tabs
    local tabButtons = {}
    local tabs = {}
    
    local function createTab(name)
        local tabButton = self:Create("TextButton", {
            Name = name.."Button",
            Parent = TabsFrame,
            BackgroundColor3 = Color3.fromRGB(45, 45, 55),
            Size = UDim2.new(1/3, 0, 1, 0),
            Font = Enum.Font.Gotham,
            Text = name,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = 14,
            BorderSizePixel = 0
        })
        
        if #tabButtons == 0 then
            tabButton.Position = UDim2.new(0, 0, 0, 0)
        elseif #tabButtons == 1 then
            tabButton.Position = UDim2.new(1/3, 0, 0, 0)
        elseif #tabButtons == 2 then
            tabButton.Position = UDim2.new(2/3, 0, 0, 0)
        end
        
        self:Create("UICorner", {
            Parent = tabButton,
            CornerRadius = UDim.new(0, 6)
        })
        
        local tabContent = self:Create("ScrollingFrame", {
            Name = name.."Tab",
            Parent = ContentHolder,
            BackgroundTransparency = 1,
            BorderSizePixel = 0,
            Size = UDim2.new(1, 0, 1, 0),
            CanvasSize = UDim2.new(0, 0, 0, 0),
            ScrollBarThickness = 4,
            Visible = #tabButtons == 0,
            ScrollBarImageColor3 = Color3.fromRGB(70, 70, 80),
            AutomaticCanvasSize = Enum.AutomaticSize.Y
        })
        
        self:Create("UIPadding", {
            Parent = tabContent,
            PaddingBottom = UDim.new(0, 10),
            PaddingLeft = UDim.new(0, 10),
            PaddingRight = UDim.new(0, 10),
            PaddingTop = UDim.new(0, 10)
        })
        
        local UIListLayout = self:Create("UIListLayout", {
            Parent = tabContent,
            SortOrder = Enum.SortOrder.LayoutOrder,
            Padding = UDim.new(0, 8)
        })
        
        table.insert(tabButtons, tabButton)
        tabs[name] = tabContent
        
        tabButton.MouseButton1Click:Connect(function()
            for _, button in pairs(tabButtons) do
                button.BackgroundColor3 = Color3.fromRGB(45, 45, 55)
            end
            
            for _, tab in pairs(tabs) do
                tab.Visible = false
            end
            
            tabButton.BackgroundColor3 = Color3.fromRGB(60, 60, 70)
            tabContent.Visible = true
        end)
        
        return tabContent
    end
    
    -- Create content for each tab
    local mainTab = createTab("Main")
    local fovTab = createTab("FOV")
    local miscTab = createTab("Misc")
    
    -- Create UI Elements
    local function createToggle(parent, text, default, callback)
        local ToggleFrame = self:Create("Frame", {
            Name = text.."Toggle",
            Parent = parent,
            BackgroundColor3 = Color3.fromRGB(40, 40, 50),
            Size = UDim2.new(1, 0, 0, 35)
        })
        
        self:Create("UICorner", {
            Parent = ToggleFrame,
            CornerRadius = UDim.new(0, 6)
        })
        
        local ToggleLabel = self:Create("TextLabel", {
            Name = "Label",
            Parent = ToggleFrame,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0, 0),
            Size = UDim2.new(1, -60, 1, 0),
            Font = Enum.Font.Gotham,
            Text = text,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left
        })
        
        local ToggleButton = self:Create("Frame", {
            Name = "ToggleButton",
            Parent = ToggleFrame,
            BackgroundColor3 = default and Color3.fromRGB(85, 170, 255) or Color3.fromRGB(60, 60, 70),
            Position = UDim2.new(1, -50, 0.5, -10),
            Size = UDim2.new(0, 40, 0, 20)
        })
        
        self:Create("UICorner", {
            Parent = ToggleButton,
            CornerRadius = UDim.new(1, 0)
        })
        
        local ToggleCircle = self:Create("Frame", {
            Name = "Circle",
            Parent = ToggleButton,
            BackgroundColor3 = Color3.fromRGB(255, 255, 255),
            Position = default and UDim2.new(1, -18, 0.5, -8) or UDim2.new(0, 2, 0.5, -8),
            Size = UDim2.new(0, 16, 0, 16)
        })
        
        self:Create("UICorner", {
            Parent = ToggleCircle,
            CornerRadius = UDim.new(1, 0)
        })
        
        local Toggled = default
        
        ToggleFrame.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                Toggled = not Toggled
                
                if Toggled then
                    TweenService:Create(ToggleButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(85, 170, 255)}):Play()
                    TweenService:Create(ToggleCircle, TweenInfo.new(0.2), {Position = UDim2.new(1, -18, 0.5, -8)}):Play()
                else
                    TweenService:Create(ToggleButton, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(60, 60, 70)}):Play()
                    TweenService:Create(ToggleCircle, TweenInfo.new(0.2), {Position = UDim2.new(0, 2, 0.5, -8)}):Play()
                end
                
                callback(Toggled)
            end
        end)
        
        return ToggleFrame
    end
    
    local function createSlider(parent, text, min, max, default, callback)
        local SliderFrame = self:Create("Frame", {
            Name = text.."Slider",
            Parent = parent,
            BackgroundColor3 = Color3.fromRGB(40, 40, 50),
            Size = UDim2.new(1, 0, 0, 55)
        })
        
        self:Create("UICorner", {
            Parent = SliderFrame,
            CornerRadius = UDim.new(0, 6)
        })
        
        local SliderLabel = self:Create("TextLabel", {
            Name = "Label",
            Parent = SliderFrame,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0, 5),
            Size = UDim2.new(1, -20, 0, 20),
            Font = Enum.Font.Gotham,
            Text = text..": "..default,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left
        })
        
        local SliderBack = self:Create("Frame", {
            Name = "SliderBack",
            Parent = SliderFrame,
            BackgroundColor3 = Color3.fromRGB(60, 60, 70),
            Position = UDim2.new(0, 10, 0, 30),
            Size = UDim2.new(1, -20, 0, 10)
        })
        
        self:Create("UICorner", {
            Parent = SliderBack,
            CornerRadius = UDim.new(1, 0)
        })
        
        local SliderFill = self:Create("Frame", {
            Name = "SliderFill",
            Parent = SliderBack,
            BackgroundColor3 = Color3.fromRGB(85, 170, 255),
            Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
        })
        
        self:Create("UICorner", {
            Parent = SliderFill,
            CornerRadius = UDim.new(1, 0)
        })
        
        local SliderValue = default
        local Dragging = false
        
        local function updateSlider(input)
            local MousePos = input.Position.X
            local FramePos = SliderBack.AbsolutePosition.X
            local FrameSize = SliderBack.AbsoluteSize.X
            
            local Position = math.clamp((MousePos - FramePos) / FrameSize, 0, 1)
            local Value = math.floor(min + (max - min) * Position)
            
            SliderValue = Value
            SliderLabel.Text = text..": "..Value
            SliderFill.Size = UDim2.new(Position, 0, 1, 0)
            
            callback(Value)
        end
        
        SliderBack.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                Dragging = true
                updateSlider(input)
            end
        end)
        
        SliderBack.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                Dragging = false
            end
        end)
        
        UserInputService.InputChanged:Connect(function(input)
            if Dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                updateSlider(input)
            end
        end)
        
        return SliderFrame
    end
    
    local function createDropdown(parent, text, options, default, callback)
        local DropdownFrame = self:Create("Frame", {
            Name = text.."Dropdown",
            Parent = parent,
            BackgroundColor3 = Color3.fromRGB(40, 40, 50),
            Size = UDim2.new(1, 0, 0, 35),
            ClipsDescendants = true
        })
        
        self:Create("UICorner", {
            Parent = DropdownFrame,
            CornerRadius = UDim.new(0, 6)
        })
        
        local DropdownLabel = self:Create("TextLabel", {
            Name = "Label",
            Parent = DropdownFrame,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0, 0),
            Size = UDim2.new(1, -20, 0, 35),
            Font = Enum.Font.Gotham,
            Text = text..": "..default,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left
        })
        
        local ArrowButton = self:Create("TextButton", {
            Name = "Arrow",
            Parent = DropdownFrame,
            BackgroundTransparency = 1,
            Position = UDim2.new(1, -30, 0, 0),
            Size = UDim2.new(0, 20, 0, 35),
            Font = Enum.Font.GothamBold,
            Text = "▼",
            TextSize = 14,
            TextColor3 = Color3.fromRGB(255, 255, 255)
        })
        
        local OptionHolder = self:Create("Frame", {
            Name = "OptionHolder",
            Parent = DropdownFrame,
            BackgroundColor3 = Color3.fromRGB(50, 50, 60),
            Position = UDim2.new(0, 0, 0, 35),
            Size = UDim2.new(1, 0, 0, #options * 30)
        })
        
        local DropdownOpen = false
        local Selected = default
        
        for i, option in ipairs(options) do
            local OptionButton = self:Create("TextButton", {
                Name = option.."Option",
                Parent = OptionHolder,
                BackgroundColor3 = Color3.fromRGB(50, 50, 60),
                Size = UDim2.new(1, 0, 0, 30),
                Position = UDim2.new(0, 0, 0, (i-1) * 30),
                Font = Enum.Font.Gotham,
                Text = option,
                TextColor3 = Color3.fromRGB(255, 255, 255),
                TextSize = 14
            })
            
            OptionButton.MouseButton1Click:Connect(function()
                Selected = option
                DropdownLabel.Text = text..": "..Selected
                DropdownOpen = false
                TweenService:Create(DropdownFrame, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 35)}):Play()
                ArrowButton.Text = "▼"
                callback(option)
            end)
        end
        
        ArrowButton.MouseButton1Click:Connect(function()
            DropdownOpen = not DropdownOpen
            
            if DropdownOpen then
                TweenService:Create(DropdownFrame, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 35 + #options * 30)}):Play()
                ArrowButton.Text = "▲"
            else
                TweenService:Create(DropdownFrame, TweenInfo.new(0.2), {Size = UDim2.new(1, 0, 0, 35)}):Play()
                ArrowButton.Text = "▼"
            end
        end)
        
        return DropdownFrame
    end
    
    local function createButton(parent, text, callback)
        local ButtonFrame = self:Create("TextButton", {
            Name = text.."Button",
            Parent = parent,
            BackgroundColor3 = Color3.fromRGB(60, 60, 70),
            Size = UDim2.new(1, 0, 0, 35),
            Font = Enum.Font.GothamBold,
            Text = text,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = 14
        })
        
        self:Create("UICorner", {
            Parent = ButtonFrame,
            CornerRadius = UDim.new(0, 6)
        })
        
        ButtonFrame.MouseButton1Click:Connect(callback)
        
        return ButtonFrame
    end
    
    local function createKeybind(parent, text, default, callback)
        local KeybindFrame = self:Create("Frame", {
            Name = text.."Keybind",
            Parent = parent,
            BackgroundColor3 = Color3.fromRGB(40, 40, 50),
            Size = UDim2.new(1, 0, 0, 35)
        })
        
        self:Create("UICorner", {
            Parent = KeybindFrame,
            CornerRadius = UDim.new(0, 6)
        })
        
        local KeybindLabel = self:Create("TextLabel", {
            Name = "Label",
            Parent = KeybindFrame,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0, 0),
            Size = UDim2.new(1, -80, 1, 0),
            Font = Enum.Font.Gotham,
            Text = text,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left
        })
        
        local KeybindButton = self:Create("TextButton", {
            Name = "KeybindButton",
            Parent = KeybindFrame,
            BackgroundColor3 = Color3.fromRGB(60, 60, 70),
            Position = UDim2.new(1, -70, 0.5, -12),
            Size = UDim2.new(0, 60, 0, 24),
            Font = Enum.Font.Gotham,
            Text = default.Name,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = 12
        })
        
        self:Create("UICorner", {
            Parent = KeybindButton,
            CornerRadius = UDim.new(0, 4)
        })
        
        local CurrentKey = default
        local WaitingForInput = false
        
        KeybindButton.MouseButton1Click:Connect(function()
            KeybindButton.Text = "..."
            WaitingForInput = true
        end)
        
        UserInputService.InputBegan:Connect(function(input)
            if WaitingForInput and input.UserInputType ~= Enum.UserInputType.MouseButton1 then
                WaitingForInput = false
                CurrentKey = input.UserInputType == Enum.UserInputType.Keyboard and input.KeyCode or input.UserInputType
                KeybindButton.Text = CurrentKey.Name
                callback(CurrentKey)
            end
        end)
        
        return KeybindFrame
    end
    
    local function createColorPicker(parent, text, default, callback)
        local ColorPickerFrame = self:Create("Frame", {
            Name = text.."ColorPicker",
            Parent = parent,
            BackgroundColor3 = Color3.fromRGB(40, 40, 50),
            Size = UDim2.new(1, 0, 0, 35)
        })
        
        self:Create("UICorner", {
            Parent = ColorPickerFrame,
            CornerRadius = UDim.new(0, 6)
        })
        
        local ColorPickerLabel = self:Create("TextLabel", {
            Name = "Label",
            Parent = ColorPickerFrame,
            BackgroundTransparency = 1,
            Position = UDim2.new(0, 10, 0, 0),
            Size = UDim2.new(1, -60, 1, 0),
            Font = Enum.Font.Gotham,
            Text = text,
            TextColor3 = Color3.fromRGB(255, 255, 255),
            TextSize = 14,
            TextXAlignment = Enum.TextXAlignment.Left
        })
        
        local ColorDisplay = self:Create("Frame", {
            Name = "ColorDisplay",
            Parent = ColorPickerFrame,
            BackgroundColor3 = default,
            Position = UDim2.new(1, -40, 0.5, -10),
            Size = UDim2.new(0, 30, 0, 20)
        })
        
        self:Create("UICorner", {
            Parent = ColorDisplay,
            CornerRadius = UDim.new(0, 4)
        })
        
        local CurrentColor = default
        
        ColorDisplay.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                local h, s, v = Color3.toHSV(CurrentColor)
                
                -- Create color picker UI (simplified for this example)
                local ColorPickerGui = self:Create("Frame", {
                    Name = "ColorPickerGui",
                    Parent = ColorPickerFrame,
                    BackgroundColor3 = Color3.fromRGB(40, 40, 50),
                    Position = UDim2.new(1, 10, 0, 0),
                    Size = UDim2.new(0, 200, 0, 220),
                    ZIndex = 10
                })
                
                self:Create("UICorner", {
                    Parent = ColorPickerGui,
                    CornerRadius = UDim.new(0, 6)
                })
                
                -- Add basic RGB sliders
                local function createRGBSlider(color, value, yPos)
                    local SliderFrame = self:Create("Frame", {
                        Name = color.."Slider",
                        Parent = ColorPickerGui,
                        BackgroundColor3 = Color3.fromRGB(60, 60, 70),
                        Position = UDim2.new(0, 10, 0, yPos),
                        Size = UDim2.new(1, -20, 0, 20),
                        ZIndex = 11
                    })
                    
                    self:Create("UICorner", {
                        Parent = SliderFrame,
                        CornerRadius = UDim.new(0, 4)
                    })
                    
                    local SliderFill = self:Create("Frame", {
                        Name = "Fill",
                        Parent = SliderFrame,
                        BackgroundColor3 = Color3.fromRGB(85, 170, 255),
                        Size = UDim2.new(value/255, 0, 1, 0),
                        ZIndex = 12
                    })
                    
                    self:Create("UICorner", {
                        Parent = SliderFill,
                        CornerRadius = UDim.new(0, 4)
                    })
                    
                    local SliderLabel = self:Create("TextLabel", {
                        Name = "Label",
                        Parent = SliderFrame,
                        BackgroundTransparency = 1,
                        Size = UDim2.new(1, 0, 1, 0),
                        Font = Enum.Font.Gotham,
                        Text = color..": "..value,
                        TextColor3 = Color3.fromRGB(255, 255, 255),
                        TextSize = 12,
                        ZIndex = 13
                    })
                    
                    local Dragging = false
                    
                    SliderFrame.InputBegan:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            Dragging = true
                        end
                    end)
                    
                    SliderFrame.InputEnded:Connect(function(input)
                        if input.UserInputType == Enum.UserInputType.MouseButton1 then
                            Dragging = false
                        end
                    end)
                    
                    UserInputService.InputChanged:Connect(function(input)
                        if Dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                            local MousePos = input.Position.X
                            local FramePos = SliderFrame.AbsolutePosition.X
                            local FrameSize = SliderFrame.AbsoluteSize.X
                            
                            local Position = math.clamp((MousePos - FramePos) / FrameSize, 0, 1)
                            local Value = math.floor(Position * 255)
                            
                            SliderFill.Size = UDim2.new(Position, 0, 1, 0)
                            SliderLabel.Text = color..": "..Value
                            
                            if color == "R" then
                                CurrentColor = Color3.new(Value/255, CurrentColor.G, CurrentColor.B)
                            elseif color == "G" then
                                CurrentColor = Color3.new(CurrentColor.R, Value/255, CurrentColor.B)
                            else
                                CurrentColor = Color3.new(CurrentColor.R, CurrentColor.G, Value/255)
                            end
                            
                            ColorDisplay.BackgroundColor3 = CurrentColor
                            callback(CurrentColor)
                        end
                    end)
                    
                    return SliderFrame
                end
                
                createRGBSlider("R", math.floor(CurrentColor.R * 255), 10)
                createRGBSlider("G", math.floor(CurrentColor.G * 255), 40)
                createRGBSlider("B", math.floor(CurrentColor.B * 255), 70)
                
                local ApplyButton = self:Create("TextButton", {
                    Name = "ApplyButton",
                    Parent = ColorPickerGui,
                    BackgroundColor3 = Color3.fromRGB(85, 170, 255),
                    Position = UDim2.new(0, 10, 0, 180),
                    Size = UDim2.new(1, -20, 0, 30),
                    Font = Enum.Font.GothamBold,
                    Text = "Apply",
                    TextColor3 = Color3.fromRGB(255, 255, 255),
                    TextSize = 14,
                    ZIndex = 11
                })
                
                self:Create("UICorner", {
                    Parent = ApplyButton,
                    CornerRadius = UDim.new(0, 4)
                })
                
                ApplyButton.MouseButton1Click:Connect(function()
                    ColorPickerGui:Destroy()
                end)
                
                -- Close color picker when clicking outside
                local ClickOutsideConnection
                ClickOutsideConnection = UserInputService.InputBegan:Connect(function(input)
                    if input.UserInputType == Enum.UserInputType.MouseButton1 then
                        local mousePos = Vector2.new(input.Position.X, input.Position.Y)
                        local framePos = ColorPickerGui.AbsolutePosition
                        local frameSize = ColorPickerGui.AbsoluteSize
                        
                        if mousePos.X < framePos.X or mousePos.X > framePos.X + frameSize.X or
                           mousePos.Y < framePos.Y or mousePos.Y > framePos.Y + frameSize.Y then
                            ColorPickerGui:Destroy()
                            ClickOutsideConnection:Disconnect()
                        end
                    end
                end)
            end
        end)
        
        return ColorPickerFrame
    end
    
    -- Fill Main Tab
    createToggle(mainTab, "Enabled", Aimbot.Settings.Enabled, function(value)
        Aimbot
